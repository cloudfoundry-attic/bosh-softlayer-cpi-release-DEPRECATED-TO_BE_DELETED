// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-softlayer-cpi/softlayer/common"
)

type FakeAgentEnvService struct {
	FetchStub        func() (common.AgentEnv, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct{}
	fetchReturns     struct {
		result1 common.AgentEnv
		result2 error
	}
	UpdateStub        func(common.AgentEnv) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 common.AgentEnv
	}
	updateReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAgentEnvService) Fetch() (common.AgentEnv, error) {
	fake.fetchMutex.Lock()
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct{}{})
	fake.recordInvocation("Fetch", []interface{}{})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub()
	} else {
		return fake.fetchReturns.result1, fake.fetchReturns.result2
	}
}

func (fake *FakeAgentEnvService) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeAgentEnvService) FetchReturns(result1 common.AgentEnv, result2 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 common.AgentEnv
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentEnvService) Update(arg1 common.AgentEnv) error {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 common.AgentEnv
	}{arg1})
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1)
	} else {
		return fake.updateReturns.result1
	}
}

func (fake *FakeAgentEnvService) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeAgentEnvService) UpdateArgsForCall(i int) common.AgentEnv {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].arg1
}

func (fake *FakeAgentEnvService) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgentEnvService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAgentEnvService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.AgentEnvService = new(FakeAgentEnvService)
