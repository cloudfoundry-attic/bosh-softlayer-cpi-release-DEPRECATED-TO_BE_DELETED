// This file was generated by counterfeiter
package fakes

import (
	"bytes"
	"sync"
)

type FakeSoftLayerClient struct {
	DoRawHttpRequestStub        func(path string, requestType string, requestBody *bytes.Buffer) ([]byte, int, error)
	doRawHttpRequestMutex       sync.RWMutex
	doRawHttpRequestArgsForCall []struct {
		path        string
		requestType string
		requestBody *bytes.Buffer
	}
	doRawHttpRequestReturns struct {
		result1 []byte
		result2 int
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSoftLayerClient) DoRawHttpRequest(path string, requestType string, requestBody *bytes.Buffer) ([]byte, int, error) {
	fake.doRawHttpRequestMutex.Lock()
	fake.doRawHttpRequestArgsForCall = append(fake.doRawHttpRequestArgsForCall, struct {
		path        string
		requestType string
		requestBody *bytes.Buffer
	}{path, requestType, requestBody})
	fake.recordInvocation("DoRawHttpRequest", []interface{}{path, requestType, requestBody})
	fake.doRawHttpRequestMutex.Unlock()
	if fake.DoRawHttpRequestStub != nil {
		return fake.DoRawHttpRequestStub(path, requestType, requestBody)
	} else {
		return fake.doRawHttpRequestReturns.result1, fake.doRawHttpRequestReturns.result2, fake.doRawHttpRequestReturns.result3
	}
}

func (fake *FakeSoftLayerClient) DoRawHttpRequestCallCount() int {
	fake.doRawHttpRequestMutex.RLock()
	defer fake.doRawHttpRequestMutex.RUnlock()
	return len(fake.doRawHttpRequestArgsForCall)
}

func (fake *FakeSoftLayerClient) DoRawHttpRequestArgsForCall(i int) (string, string, *bytes.Buffer) {
	fake.doRawHttpRequestMutex.RLock()
	defer fake.doRawHttpRequestMutex.RUnlock()
	return fake.doRawHttpRequestArgsForCall[i].path, fake.doRawHttpRequestArgsForCall[i].requestType, fake.doRawHttpRequestArgsForCall[i].requestBody
}

func (fake *FakeSoftLayerClient) DoRawHttpRequestReturns(result1 []byte, result2 int, result3 error) {
	fake.DoRawHttpRequestStub = nil
	fake.doRawHttpRequestReturns = struct {
		result1 []byte
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSoftLayerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doRawHttpRequestMutex.RLock()
	defer fake.doRawHttpRequestMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSoftLayerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
