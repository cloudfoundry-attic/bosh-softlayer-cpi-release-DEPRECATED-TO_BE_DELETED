// This file was generated by counterfeiter
package fakes

import "sync"

type FakeSLFileService struct {
	UploadStub        func(path string, data []byte) error
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		path string
		data []byte
	}
	uploadReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSLFileService) Upload(user string, password string, target string, path string, data []byte) error {
	var dataCopy []byte
	if data != nil {
		dataCopy = make([]byte, len(data))
		copy(dataCopy, data)
	}
	fake.uploadMutex.Lock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		path string
		data []byte
	}{path, dataCopy})
	fake.recordInvocation("Upload", []interface{}{path, dataCopy})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(path, data)
	} else {
		return fake.uploadReturns.result1
	}
}

func (fake *FakeSLFileService) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeSLFileService) UploadArgsForCall(i int) (string, []byte) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].path, fake.uploadArgsForCall[i].data
}

func (fake *FakeSLFileService) UploadReturns(result1 error) {
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSLFileService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSLFileService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
