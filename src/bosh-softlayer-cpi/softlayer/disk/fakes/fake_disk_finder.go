// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-softlayer-cpi/softlayer/disk"
)

type FakeDiskFinder struct {
	FindStub        func(id int) (disk.Disk, bool, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		id int
	}
	findReturns struct {
		result1 disk.Disk
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiskFinder) Find(id int) (disk.Disk, bool, error) {
	fake.findMutex.Lock()
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		id int
	}{id})
	fake.recordInvocation("Find", []interface{}{id})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(id)
	} else {
		return fake.findReturns.result1, fake.findReturns.result2, fake.findReturns.result3
	}
}

func (fake *FakeDiskFinder) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeDiskFinder) FindArgsForCall(i int) int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].id
}

func (fake *FakeDiskFinder) FindReturns(result1 disk.Disk, result2 bool, result3 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 disk.Disk
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDiskFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDiskFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ disk.DiskFinder = new(FakeDiskFinder)
