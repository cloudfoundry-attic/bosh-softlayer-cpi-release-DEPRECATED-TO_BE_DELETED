// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-softlayer-cpi/softlayer/disk"
)

type FakeDiskCreator struct {
	CreateStub        func(size int, cloudProp disk.DiskCloudProperties, datacenter_id int) (disk.Disk, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		size          int
		cloudProp     disk.DiskCloudProperties
		datacenter_id int
	}
	createReturns struct {
		result1 disk.Disk
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiskCreator) Create(size int, cloudProp disk.DiskCloudProperties, datacenter_id int) (disk.Disk, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		size          int
		cloudProp     disk.DiskCloudProperties
		datacenter_id int
	}{size, cloudProp, datacenter_id})
	fake.recordInvocation("Create", []interface{}{size, cloudProp, datacenter_id})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(size, cloudProp, datacenter_id)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeDiskCreator) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDiskCreator) CreateArgsForCall(i int) (int, disk.DiskCloudProperties, int) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].size, fake.createArgsForCall[i].cloudProp, fake.createArgsForCall[i].datacenter_id
}

func (fake *FakeDiskCreator) CreateReturns(result1 disk.Disk, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 disk.Disk
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDiskCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ disk.DiskCreator = new(FakeDiskCreator)
