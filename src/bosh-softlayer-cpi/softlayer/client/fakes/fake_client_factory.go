// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-softlayer-cpi/softlayer/client"
	"sync"
)

type FakeClientFactory struct {
	CreateClientStub        func() client.Client
	createClientMutex       sync.RWMutex
	createClientArgsForCall []struct{}
	createClientReturns     struct {
		result1 client.Client
	}
	createClientReturnsOnCall map[int]struct {
		result1 client.Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientFactory) CreateClient() client.Client {
	fake.createClientMutex.Lock()
	ret, specificReturn := fake.createClientReturnsOnCall[len(fake.createClientArgsForCall)]
	fake.createClientArgsForCall = append(fake.createClientArgsForCall, struct{}{})
	fake.recordInvocation("CreateClient", []interface{}{})
	fake.createClientMutex.Unlock()
	if fake.CreateClientStub != nil {
		return fake.CreateClientStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createClientReturns.result1
}

func (fake *FakeClientFactory) CreateClientCallCount() int {
	fake.createClientMutex.RLock()
	defer fake.createClientMutex.RUnlock()
	return len(fake.createClientArgsForCall)
}

func (fake *FakeClientFactory) CreateClientReturns(result1 client.Client) {
	fake.CreateClientStub = nil
	fake.createClientReturns = struct {
		result1 client.Client
	}{result1}
}

func (fake *FakeClientFactory) CreateClientReturnsOnCall(i int, result1 client.Client) {
	fake.CreateClientStub = nil
	if fake.createClientReturnsOnCall == nil {
		fake.createClientReturnsOnCall = make(map[int]struct {
			result1 client.Client
		})
	}
	fake.createClientReturnsOnCall[i] = struct {
		result1 client.Client
	}{result1}
}

func (fake *FakeClientFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createClientMutex.RLock()
	defer fake.createClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.ClientFactory = new(FakeClientFactory)
