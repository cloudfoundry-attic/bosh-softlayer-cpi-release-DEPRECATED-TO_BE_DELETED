// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-softlayer-cpi/softlayer/stemcell"
)

type FakeStemcellFinder struct {
	FindByIdStub        func(id int) (stemcell.Stemcell, error)
	findByIdMutex       sync.RWMutex
	findByIdArgsForCall []struct {
		id int
	}
	findByIdReturns struct {
		result1 stemcell.Stemcell
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStemcellFinder) FindById(id int) (stemcell.Stemcell, error) {
	fake.findByIdMutex.Lock()
	fake.findByIdArgsForCall = append(fake.findByIdArgsForCall, struct {
		id int
	}{id})
	fake.recordInvocation("FindById", []interface{}{id})
	fake.findByIdMutex.Unlock()
	if fake.FindByIdStub != nil {
		return fake.FindByIdStub(id)
	} else {
		return fake.findByIdReturns.result1, fake.findByIdReturns.result2
	}
}

func (fake *FakeStemcellFinder) FindByIdCallCount() int {
	fake.findByIdMutex.RLock()
	defer fake.findByIdMutex.RUnlock()
	return len(fake.findByIdArgsForCall)
}

func (fake *FakeStemcellFinder) FindByIdArgsForCall(i int) int {
	fake.findByIdMutex.RLock()
	defer fake.findByIdMutex.RUnlock()
	return fake.findByIdArgsForCall[i].id
}

func (fake *FakeStemcellFinder) FindByIdReturns(result1 stemcell.Stemcell, result2 error) {
	fake.FindByIdStub = nil
	fake.findByIdReturns = struct {
		result1 stemcell.Stemcell
		result2 error
	}{result1, result2}
}

func (fake *FakeStemcellFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findByIdMutex.RLock()
	defer fake.findByIdMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStemcellFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stemcell.StemcellFinder = new(FakeStemcellFinder)
