// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	disk "bosh-softlayer-cpi/softlayer/disk_service"
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
)

type FakeService struct {
	CreateStub        func(size int, iops int, location string) (int, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		size     int
		iops     int
		location string
	}
	createReturns struct {
		result1 int
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	DeleteStub        func(id int) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		id int
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	FindStub        func(id int) (datatypes.Network_Storage, bool, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		id int
	}
	findReturns struct {
		result1 datatypes.Network_Storage
		result2 bool
		result3 error
	}
	findReturnsOnCall map[int]struct {
		result1 datatypes.Network_Storage
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) Create(size int, iops int, location string) (int, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		size     int
		iops     int
		location string
	}{size, iops, location})
	fake.recordInvocation("Create", []interface{}{size, iops, location})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(size, iops, location)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeService) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeService) CreateArgsForCall(i int) (int, int, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].size, fake.createArgsForCall[i].iops, fake.createArgsForCall[i].location
}

func (fake *FakeService) CreateReturns(result1 int, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeService) CreateReturnsOnCall(i int, result1 int, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Delete(id int) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		id int
	}{id})
	fake.recordInvocation("Delete", []interface{}{id})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeService) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeService) DeleteArgsForCall(i int) int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].id
}

func (fake *FakeService) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) Find(id int) (datatypes.Network_Storage, bool, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		id int
	}{id})
	fake.recordInvocation("Find", []interface{}{id})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.findReturns.result1, fake.findReturns.result2, fake.findReturns.result3
}

func (fake *FakeService) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeService) FindArgsForCall(i int) int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].id
}

func (fake *FakeService) FindReturns(result1 datatypes.Network_Storage, result2 bool, result3 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 datatypes.Network_Storage
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeService) FindReturnsOnCall(i int, result1 datatypes.Network_Storage, result2 bool, result3 error) {
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Storage
			result2 bool
			result3 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 datatypes.Network_Storage
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ disk.Service = new(FakeService)
