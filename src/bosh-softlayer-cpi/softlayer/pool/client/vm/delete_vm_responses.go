package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/cloudfoundry/bosh-softlayer-cpi/softlayer/pool/models"
)

// DeleteVMReader is a Reader for the DeleteVM structure.
type DeleteVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteVMNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteVMNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteVMDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewDeleteVMNoContent creates a DeleteVMNoContent with default headers values
func NewDeleteVMNoContent() *DeleteVMNoContent {
	return &DeleteVMNoContent{}
}

/*DeleteVMNoContent handles this case with default header values.

vm removed successfully
*/
type DeleteVMNoContent struct {
	Payload string
}

func (o *DeleteVMNoContent) Error() string {
	return fmt.Sprintf("[DELETE /vms/{cid}][%d] deleteVmNoContent  %+v", 204, o.Payload)
}

func (o *DeleteVMNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVMNotFound creates a DeleteVMNotFound with default headers values
func NewDeleteVMNotFound() *DeleteVMNotFound {
	return &DeleteVMNotFound{}
}

/*DeleteVMNotFound handles this case with default header values.

vm not found
*/
type DeleteVMNotFound struct {
}

func (o *DeleteVMNotFound) Error() string {
	return fmt.Sprintf("[DELETE /vms/{cid}][%d] deleteVmNotFound ", 404)
}

func (o *DeleteVMNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVMDefault creates a DeleteVMDefault with default headers values
func NewDeleteVMDefault(code int) *DeleteVMDefault {
	return &DeleteVMDefault{
		_statusCode: code,
	}
}

/*DeleteVMDefault handles this case with default header values.

unexpected error
*/
type DeleteVMDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete Vm default response
func (o *DeleteVMDefault) Code() int {
	return o._statusCode
}

func (o *DeleteVMDefault) Error() string {
	return fmt.Sprintf("[DELETE /vms/{cid}][%d] deleteVm default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteVMDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
