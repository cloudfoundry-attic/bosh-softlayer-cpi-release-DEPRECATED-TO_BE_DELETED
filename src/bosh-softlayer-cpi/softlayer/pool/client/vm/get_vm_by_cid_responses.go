package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/cloudfoundry/bosh-softlayer-cpi/softlayer/pool/models"
)

// GetVMByCidReader is a Reader for the GetVMByCid structure.
type GetVMByCidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMByCidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVMByCidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetVMByCidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVMByCidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetVMByCidOK creates a GetVMByCidOK with default headers values
func NewGetVMByCidOK() *GetVMByCidOK {
	return &GetVMByCidOK{}
}

/*GetVMByCidOK handles this case with default header values.

successful operation
*/
type GetVMByCidOK struct {
	Payload *models.VMResponse
}

func (o *GetVMByCidOK) Error() string {
	return fmt.Sprintf("[GET /vms/{cid}][%d] getVmByCidOK  %+v", 200, o.Payload)
}

func (o *GetVMByCidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VMResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMByCidNotFound creates a GetVMByCidNotFound with default headers values
func NewGetVMByCidNotFound() *GetVMByCidNotFound {
	return &GetVMByCidNotFound{}
}

/*GetVMByCidNotFound handles this case with default header values.

vm not found
*/
type GetVMByCidNotFound struct {
}

func (o *GetVMByCidNotFound) Error() string {
	return fmt.Sprintf("[GET /vms/{cid}][%d] getVmByCidNotFound ", 404)
}

func (o *GetVMByCidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVMByCidDefault creates a GetVMByCidDefault with default headers values
func NewGetVMByCidDefault(code int) *GetVMByCidDefault {
	return &GetVMByCidDefault{
		_statusCode: code,
	}
}

/*GetVMByCidDefault handles this case with default header values.

unexpected error
*/
type GetVMByCidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get Vm by cid default response
func (o *GetVMByCidDefault) Code() int {
	return o._statusCode
}

func (o *GetVMByCidDefault) Error() string {
	return fmt.Sprintf("[GET /vms/{cid}][%d] getVmByCid default  %+v", o._statusCode, o.Payload)
}

func (o *GetVMByCidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
